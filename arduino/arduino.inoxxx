#include <Canbus.h>
#include <defaults.h>
#include <global.h>
#include <mcp2515.h>
#include <mcp2515_defs.h>

char buffer[64];  //D
char buffer2[64];  //D

//********************************Setup Loop*********************************//

void setup() {
  Serial.begin(9600); // For debug use
  Serial.println("CAN Read - Testing receival of CAN Bus message");  
  delay(1000);
  
  if(Canbus.init(CANSPEED_500))  //Initialise MCP2515 CAN controller at the specified speed
    Serial.println("CAN Init ok");
  else
    Serial.println("Can't init CAN");
    
  delay(1000);
}

//********************************Main Loop*********************************//

char ecu_req(unsigned char pid,  char *buffer) 
{
  tCAN message;
  float engine_data;
  // Prepair message
  message.id = PID_REQUEST;
  message.header.rtr = 0;
  message.header.length = 8;
  message.data[0] = 0x02;
  message.data[1] = 0x01;
  message.data[2] = pid;
  message.data[3] = 0x00;
  message.data[4] = 0x00;
  message.data[5] = 0x00;
  message.data[6] = 0x00;
  message.data[7] = 0x00;           
  

  mcp2515_bit_modify(CANCTRL, (1<<REQOP2)|(1<<REQOP1)|(1<<REQOP0), 0);
  
  mcp2515_send_message(&message);
        if (mcp2515_check_message()) 
        {
      
          if (mcp2515_get_message(&message)) 
          {
               
              switch(message.data[2])
                {   /* Details from http://en.wikipedia.org/wiki/OBD-II_PIDs */
                  case ENGINE_RPM:        //   ((A*256)+B)/4    [RPM]
                  engine_data =  ((message.data[3]*256) + message.data[4])/4;
                  sprintf(buffer,"%d rpm ",(int) engine_data);
                  break;
                  
                  case 0x2F: // fuel level
                  case 0x04:
                  engine_data =  message.data[3] * 100/255;
                  sprintf(buffer,"%d",(int) engine_data);
                  break;
                  case ENGINE_COOLANT_TEMP:   //  A-40        [degree C]
                  engine_data =  message.data[3] - 40;
                  sprintf(buffer,"%d degC",(int) engine_data);
                  break;
              
                  case VEHICLE_SPEED:     // A          [km]
                  engine_data =  message.data[3];
                  sprintf(buffer,"%d km ",(int) engine_data);
                  break;

                  case MAF_SENSOR:        // ((256*A)+B) / 100  [g/s]
                  engine_data =  ((message.data[3]*256) + message.data[4])/100;
                  sprintf(buffer,"%d g/s",(int) engine_data);
                  break;

                  case 0x42:        // ((256*A)+B) / 100  [g/s]
                  engine_data =  ((message.data[3]*256) + message.data[4])/1000;
                  sprintf(buffer,"%d v",(int) engine_data);
                  break;
                  
                  case 0x1F:        // ((256*A)+B) / 100  [g/s]
                  engine_data =  ((message.data[3]*256) + message.data[4]);
                  sprintf(buffer,"%d v",(int) engine_data);
                  break;
                  
                  case 0x33:        // ((256*A)+B) / 100  [g/s]
                  engine_data =  (message.data[3]);
                  sprintf(buffer,"%d v",(int) engine_data);
                  break;
                  
                  case O2_VOLTAGE:        // A * 0.005   (B-128) * 100/128 (if B==0xFF, sensor is not used in trim calc)
                  engine_data = message.data[3]*0.005;
                  sprintf(buffer,"%d V",(int) engine_data);
                  break;
                  
                  case THROTTLE:        // Throttle Position
                  engine_data = (message.data[3]*100)/255;
                  sprintf(buffer,"%d %% ",(int) engine_data);
                  break;
              
                }
                Serial.print(buffer);
          }
        }
        

}
void loop(){
  //ecu_req(0x04,buffer); 
  // ecu_req(0x2f,buffer); 
  //ecu_req(0x0c,buffer2); 
  //Serial.println(buffer);
  //Serial.println(buffer2);
  delay(10);
  ecu_req(0x0c,buffer2); 
  delay(10);
  Serial.println("s");
}